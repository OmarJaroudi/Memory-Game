title	"Memory_Game"	
list	p=16f84A
include "p16f84A.inc"


		c1		EQU	d'12'
		COUNT1	EQU	d'13'
		COUNT2	EQU	d'14'
		SCENE	EQU	d'15'		
		;"Scene" flag is used to indicate which scene we are in
		;there are 4 scenes (Main menu, Mode1,Mode2,Mode3)
		;so we can use 4 bits (1000 = Main menu,0100 = Mode1 etc.)
		;when any of the 4 bits is set to 1, the others are 0

		AC		EQU	d'16'	;indicates address of LCD
		tempA1	EQU	d'17'
		tempA2	EQU	d'18'
		tempB1	EQU	d'19'
		tempB2	EQU	d'20'
		COUNTER	EQU	d'21'
		IsOpen	EQU	d'22'	;indicates if a card is already open or not
		
		;LETTERS
		;Each of thee L registers contains the 8 bit 
		;representation of each letter on the LCD
		L1		EQU	d'23'
		L2		EQU	d'24'
		L3		EQU	d'25'
		L4		EQU	d'26'
		L5		EQU	d'27'
		L6		EQU	d'28'
		L7		EQU	d'29'
		L8		EQU	d'30'
		L9		EQU	d'31'
		L10		EQU	d'32'
		L11		EQU	d'33'
		L12		EQU	d'34'

		;Flags to tell whether each letter is currently open or not
		;if the 0 bit is set, the letter is open
		S1		EQU	d'35'
		S2		EQU	d'36'
		S3		EQU	d'37'
		S4		EQU	d'38'
		S5		EQU	d'39'
		S6		EQU	d'40'
		S7		EQU	d'41'
		S8		EQU	d'42'
		S9		EQU	d'43'
		S10		EQU	d'44'
		S11		EQU	d'45'
		S12		EQU	d'46'

		;RECENT reg keeps track of the first letter opened in a pair
		RECENT	EQU	d'47'

		;RECENT@ indicates the position of RECENT on the LCD
		RECENT@	EQU	d'48'
		
		TEMP	EQU	d'49'

		;MATCHES keeps track of the number of matches in a game
		MATCHES	EQU	d'50'
		
		;NOMATCH keeps track of the number of mismatches
		;Used in Mode1
		;Not cumulative -- every two mismatches, clear and repeat
		NOMATCH EQU d'51'
		
		COUNTER2	EQU	d'52'

		ORG		0x0
		GOTO 	MAIN

		;address 0x04 for interrupts
		ORG		0x04
		BTFSC	INTCON,RBIF
		GOTO	RBINT

		BTFSC	INTCON,T0IF
		GOTO	TMR0INT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;; OUTPUTS AND INPUTS ;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MAIN	MOVLW	b'0011'
		MOVWF	L1
		MOVWF	L10
		MOVLW	b'0001'
		MOVWF	L2
		MOVWF	L11
		MOVLW	b'0101'	
		MOVWF	L3
		MOVWF	L12
		MOVLW	b'0110'
		MOVWF	L4
		MOVWF	L9
		MOVLW	b'0100'
		MOVWF	L6
		MOVWF	L8
		MOVLW	b'0010'
		MOVWF	L5
		MOVWF	L7
		;ABOVE: storing the letters in the given L registers

		CLRF	SCENE
		CLRF	PORTB
		BSF		STATUS,RP0
		MOVLW	b'10000111'
		MOVWF	OPTION_REG
		CLRF	TRISA
		MOVLW	b'11110000'
		MOVWF	TRISB
		BCF		STATUS,RP0
		CLRF	INTCON
		BCF		INTCON,GIE
		BSF		INTCON,RBIE		; to use RB4-77 interrupts
		CLRF	PORTA
		MOVLW	d'155'
		MOVWF	COUNTER2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;; INITIALIZATION SEQUENCE ;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		;FUNCTION SET	
		CALL	DELAY2
		MOVLW	b'00010'
		MOVWF	PORTA
		CALL	ET
		;same data line
		CALL	ET
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		
		;DISPLAY ON/OFF
		MOVLW	b'01100'
		MOVWF	tempA1
		CALL	DISPLAY_ON_OFF

		;CLEAR DISPLAY
		CALL	Clear_Display

		;ENTRY MODE SET
		MOVLW	b'00000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'00110'
		MOVWF	PORTA
		CALL	ET  


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;; IMPLMENETATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MEMORY_GAME	
		;SET ADDRESS
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'00010'
		MOVWF	PORTA
		CALL	ET

		;Print M
		CALL	Letter_M

		;Print E
		CALL	Letter_E

		;Print M
		CALL	Letter_M

		;Print O
		CALL	Letter_O

		CALL	Letter_R

		;Print Y
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11001'
		MOVWF	PORTA
		CALL	ET

		;Print blank space
		CALL	Blank_Space

		;Print G
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10111'
		MOVWF	PORTA
		CALL	ET

		;Print A
		CALL	Letter_A

		;Print M
		CALL	Letter_M

		;Print E
		CALL	Letter_E
		
		;freezing the welcome message for about 2.5 seconds on the LCD
		MOVLW	d'50'
		MOVWF	c1
Label	CALL	DELAY2
		DECFSZ	c1,f
		GOTO Label
		

MAIN_MENU	;player should now see " MODE	*1	2	3 "
		
		BCF		INTCON,T0IE
		;Removing the cursor (DISPLAAY ON/OFF)
		MOVLW	b'01100'
		MOVWF	tempA1
		CALL	DISPLAY_ON_OFF

		;CLEAR DISPLAY
		CALL	Clear_Display

		;SET ADDRESS
		CALL	Clear_Address
		
		MOVLW	b'1000'
		MOVWF	SCENE	; we are in the "main menu" scene
		MOVLW	d'6'
		MOVWF	AC		; after printing the required characters, 
						; our current address will be 06

		;M
		CALL	Letter_M

		;O
		CALL	Letter_O

		;D
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET

		;E
		CALL	Letter_E

		;blank space
		CALL	Blank_Space
		CALL	Blank_Space
		
		;Print 1
		MOVLW	b'10001'
		MOVWF	tempA1
		CALL	NUMBER
	
		CALL	Blank_Space
		CALL	Blank_Space
		
		;Print 2
		INCF	tempA1
		CALL	NUMBER

		CALL	Blank_Space
		CALL	Blank_Space
		
		;Print 3
		INCF	tempA1
		CALL	NUMBER
		
		;SET ADDRESS to 05
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'00101'
		MOVWF	PORTA
		CALL	ET

		;Print asterisk before '1' (*)
		CALL	Asterisk
		BSF		INTCON,GIE	;setting GIE means the program now responds to interrupts
							; this is not done before so that it goes through 
							; the welcome routine directly 

InfLoop		;waiting for the player to navigate between modes or choose a mode

		BTFSC	SCENE,3
		GOTO	InfLoop
		BTFSC	SCENE,2
		GOTO	MODE1
		BTFSC	SCENE,1
		GOTO	MODE2
		BTFSC	SCENE,0
		GOTO	MODE3
		GOTO	InfLoop

; this is where MODE1 starts
; - print on the LCD
; -- wait for the player to start playing by flipping cards
; NOTE: we clear the S registers (S1 through S12) to make sure that all
;		cards are initially closed every time we start to play 

MODE1	
		CALL	Clear_S
	
		CLRF	MATCHES
		CLRF	NOMATCH
		CLRF	tempA2
		CALL	INITIAL_CARDS	;prints 12 white boxes on LCD
		
		CALL	Set_AT_8
		
		;Print S
		CALL	Letter_S
		
		;Print _| 6 times
		MOVLW	d'7'
		MOVWF	COUNTER
		
X		DECFSZ	COUNTER,F
		GOTO 	AX
		GOTO	AA
AX		MOVLW	b'11010'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10011'
		MOVWF	PORTA
		CALL	ET
		GOTO	X

		;Print W
AA		CALL	Letter_W

		;Clear address to set cursor at 00
		CALL	Clear_Address
		MOVLW	d'9'
		MOVWF	tempA1	;at this point tempA1 is used to print the black boxes
						; as the player does more and more mismatches
						; tempA1 will hold the address of the position 
						; at which the next black box is to be printed
						; initially its at 09, which is right next to S
						; when the player does the first mismatch
						; we print a black box and move tempA1 to 0A

;waiting for interrupts
Mode1_Loop
		BTFSC	SCENE,3
		GOTO	MAIN_MENU
		GOTO	Mode1_Loop

MODE2	MOVLW	d'155'
		MOVWF	COUNTER2
		CALL	Clear_S
		CLRF	MATCHES
		CALL	INITIAL_CARDS
		CALL	Set_AT_8
		CALL	Letter_R
		CALL	Letter_E
		CALL	Letter_M
		CALL	Blank_Space
		
		;Printing T
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET

		MOVLW	b'11001'
		MOVWF	tempA1
		CALL	NUMBER	;print 9
		MOVLW	b'10000'
		MOVWF	tempA1
		CALL	NUMBER
		MOVLW	b'11001'
		MOVWF	tempA1
		MOVLW	b'1001'
		MOVWF	tempB1
		CALL	Clear_Address	
		BSF		INTCON,T0IE		; to use timer interrupt
	

	
Mode2_Loop
		BTFSC	SCENE,3
		GOTO	MAIN_MENU	
		GOTO	Mode2_Loop
		
MODE3	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;; COMMONLY USED FUNCTIONS IN CODE ;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DISPLAY_ON_OFF
		MOVLW	b'00000'
		MOVWF	PORTA
		CALL	ET
		MOVF	tempA1,w
		MOVWF	PORTA
		CALL	ET
		RETURN

;Clears Display of LCD
Clear_Display
		MOVLW	b'00000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'00001'
		MOVWF	PORTA
		CALL	ET
		RETURN

;Prints a blank space
Blank_Space
		MOVLW	b'11010'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10000'
		MOVWF	PORTA
		CALL	ET
		RETURN

;Prints an asterisk
Asterisk
		MOVLW	b'10010'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11010'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_W
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10111'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_R
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10010'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_S	
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10011'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_O
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11111'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_M 
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11101'
		MOVWF	PORTA
		CALL	ET
		RETURN

Letter_E
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		RETURN
Letter_C
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10011'
		MOVWF	PORTA
		CALL	ET
		RETURN
Letter_A	
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10001'
		MOVWF	PORTA
		CALL	ET
		RETURN


;prints a number form 0 to 9 on the LCD
NUMBER	MOVLW	b'10011'
		MOVWF	PORTA
		CALL	ET
		MOVF	tempA1,w
		MOVWF	PORTA
		CALL	ET
		RETURN

;Set address to 08 in order to print S------W or  REMT90 etc.
Set_AT_8
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		RETURN

;TOGGLE
ET		BSF		PORTB,1
		NOP
		BCF		PORTB,1
		Call	DELAY
		RETURN

; Moves the asterisk
; This function is used in the MAIN MENU scene
; FUNCTIONALITY: 
; we know that the asterisk can only be at 3 positions
; in our case they are addresses 05, 08, 0B on the LCD
; so we take 3 cases
; if AST is at 05, delete it and print it at 08
; same for at 08 and 0B

SET_AST
		;Set Address
		MOVF	tempA1,w
		MOVWF 	PORTA
		CALL  	ET
		MOVF	tempA2,w
		MOVWF 	PORTA
		CALL  	ET

		CALL 	Blank_Space

		;Set Address
		MOVF	tempB1,w
		MOVWF 	PORTA
		CALL 	ET
		MOVF	tempB2,w
		MOVWF 	PORTA
		CALL 	ET
		
		CALL 	Asterisk
		RETURN	


BOX		MOVLW	b'11101'
		MOVWF 	PORTA
		CALL 	ET
		MOVLW	b'11011'
		MOVWF 	PORTA
		CALL 	ET	
		RETURN


; Prints 12 white cards which is the initial display of every game
; we print 6 boxes on the first line
; set the address to the second line
; print the other 6 boxes


;clear S1 through S12 registers
Clear_S	MOVLW	d'35'
		MOVWF	FSR
		MOVLW	d'13'
		MOVWF	COUNTER
S		DECFSZ	COUNTER,F
		GOTO	N
		GOTO 	cont
N		CLRF	INDF
		INCF	FSR
		GOTO 	S
cont	RETURN
 
LOAD_UPPER_AC
		MOVLW	b'01000'
		BTFSC	AC,7
		ADDLW	b'100'
		MOVWF	PORTA
		CALL	ET
		RETURN

INITIAL_CARDS
		;DISPLAY ON/OFF (activating cursor)
		MOVLW	b'01110'
		MOVWF	tempA1
		CALL	DISPLAY_ON_OFF

		CALL	Clear_Display
		
		
		;Set Address
		CALL	Clear_Address

		CALL	UTILITY
		
		;Set Address
		MOVLW	b'01100'
		MOVWF 	PORTA
		CALL 	ET
		MOVLW	b'00000'
		MOVWF 	PORTA
		CALL 	ET
		
		CALL	UTILITY

		RETURN

;UTILITY prints a white box 6 times
UTILITY	MOVLW	d'6'
		MOVWF	COUNTER
L		CALL	BOX
		DECFSZ	COUNTER
		GOTO	L
		RETURN

; function that controls all button pushes during a game
; if a player hits any of the four available buttons in-game
; the interrupt will call this function 
; this is done over and over until the game ends,
; wherein the score is calculated later on

PLAY_GAME
; to arrive here
; the player had pressed one of the four buttons
; so we have four cases to take care of
; pressing right or left only requires us to move the DD address
; and update the corresponding flags

		BTFSS	PORTB,5
		GOTO	RIGHT
		BTFSS	PORTB,4
		GOTO	LEFT
		BTFSS	PORTB,6
		GOTO	UP_DOWN
		BTFSS	PORTB,7
		GOTO	FLIP
		GOTO	DONE

RIGHT	MOVF	AC,w
		MOVWF	c1
		BCF		c1,7
		MOVLW	d'5'
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO	BUZZ
		CALL	LOAD_UPPER_AC
		INCF	AC
		MOVF	AC,w
		MOVWF	PORTA
		CALL	ET
		GOTO	DONE

LEFT	MOVF	AC,w
		MOVWF	c1
		BCF		c1,7
		CLRW	
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO	BUZZ
		CALL	LOAD_UPPER_AC
		DECF	AC
		MOVF	AC,w
		MOVWF	PORTA
		CALL	ET
		GOTO 	DONE


UP_DOWN	MOVLW	b'01000'
		MOVWF	PORTA
		BTFSS	AC,7
		BSF		PORTA,2
		BTFSC	AC,7
		BCF		PORTA,2
		CALL	ET

		MOVLW	b'10000000'
		XORWF	AC
		MOVF	AC,w
		MOVWF	PORTA
		CALL	ET
		GOTO	DONE
; flipping a card...
; make sure the cards the player is trying to flip is not already open
; this is where the S flags come in handy 
FLIP	MOVLW	d'35'
		MOVWF	FSR
		MOVF	AC,w
		MOVWF	c1
		MOVLW	d'6'
		BTFSC	c1,7
		ADDWF	c1
		BCF		c1,7
		MOVF	c1,w
		ADDWF	FSR
		BTFSC	INDF,0
		GOTO	BUZZ
		
; we need to know whether this is the first card of a pair or the second
; for this, there is a special flag we have declared which is IsOpen
; if the 0 bit is set then the second card is being flipped

		BTFSS	IsOpen,0
		GOTO	FIRST
		GOTO	SECOND


FIRST	MOVF	AC,w
		MOVWF	RECENT@
		MOVLW	d'12'
		SUBWF	FSR
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVF	INDF,w
		MOVWF	RECENT
		IORLW	b'10000'
		MOVWF	PORTA
		CALL	ET
		
		CALL	Clear_Address
		
		MOVLW	d'12'
		ADDWF	FSR
		MOVF	FSR,w
		MOVWF	TEMP
		BSF		INDF,0
		BSF		IsOpen,0
		GOTO	DONE

; upon flipping the second card in a pair,
; we need to check if the pair is correct or not
; we compare the 8 bit value of the character we are flipping,
; with the chracter we just flipped, which is in the RECENT register
		
SECOND	BCF		IsOpen,0
		MOVLW	d'12'
		SUBWF	FSR
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVF	INDF,w
		IORLW	b'10000'
		MOVWF	PORTA
		CALL	ET
		
		MOVF	RECENT,w
		SUBWF	INDF,0
		BTFSS	STATUS,Z
		GOTO	MISMATCH

; if the two cards match, we increment the MATCHES register
; keep both cards open
; generate buzz

MATCH	INCF	MATCHES
		MOVLW	d'12'
		ADDWF	FSR
		BSF		INDF,0
		
		CALL	Clear_Address
		CLRF	RECENT
		GOTO	BUZZ

; in case the two cards don't match
; we should close both
; the address is currently at the second card
; so we replace it with a white box and clear the corresponding S register
; the address of the first card will be in RECENT@
; we set DD ram to it, replace it with a white box and clear the corresponding S reg
; we increment the NOMATCH register
; we also generate a red brief light
		
MISMATCH
		INCF	NOMATCH
		INCF	tempA2
		MOVF	TEMP,w
		MOVWF	FSR
		BCF		INDF,0
		BSF		PORTB,2
		CALL	DELAY4
	
		MOVLW	b'01000'
		MOVWF	PORTA
		MOVLW	b'100'
		BTFSC	AC,7
		ADDWF	PORTA
		CALL	ET
		MOVF	AC,w
		MOVWF	PORTA
		CALL	ET

		CALL	BOX	
		
		MOVLW	b'01000'
		MOVWF	PORTA
		MOVLW	b'100'		
		BTFSC	RECENT@,7
		ADDWF	PORTA
		CALL	ET
		MOVF	RECENT@,w
		MOVWF	PORTA
		CALL	ET
		
		CALL	BOX
		
		MOVLW	d'35'
		MOVWF	FSR
		MOVF	AC,w
		MOVWF	c1
		MOVLW	d'6'
		BTFSC	c1,7
		ADDWF	c1
		BCF		c1,7
		MOVF	c1,w
		ADDWF	FSR
		BCF		INDF,0
		
		CALL	Clear_Address
		BCF		PORTB,2
		GOTO	DONE

BUZZ	BSF		PORTB,0
		CALL	DELAY3
		BCF		PORTB,0

DONE	RETURN


Clear_Address
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'00000'
		MOVWF	PORTA
		CALL	ET
		CLRF	AC
		RETURN


PRINT_SCORE
		MOVLW	b'01100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		CALL	Letter_S
		CALL	Letter_C
		CALL	Letter_O
		CALL	Letter_R
		CALL	Letter_E
		CALL	Blank_Space
		RETURN
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; DELAYS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;1.5 ms delay
DELAY	MOVLW	h'00'
		MOVWF	COUNT1
		MOVLW	d'2'
		MOVWF	COUNT2
LOOP	INCFSZ	COUNT1,F
		GOTO	LOOP
		DECFSZ	COUNT2,F
		GOTO 	LOOP
		RETURN

;40 MS DELAY
DELAY2	MOVLW	h'00'
		MOVWF	COUNT1
		MOVLW	d'52'
		MOVWF	COUNT2
LOOP2	INCFSZ	COUNT1,F
		GOTO	LOOP2
		DECFSZ	COUNT2,F
		GOTO 	LOOP2
		RETURN

; ~ 196 msec delay
DELAY3	MOVLW	h'00'
		MOVWF	COUNT1
		MOVLW	d'255'
		MOVWF	COUNT2
LOOP3	INCFSZ	COUNT1,F
		GOTO	LOOP3
		DECFSZ	COUNT2,F
		GOTO 	LOOP3
		RETURN

; ~ 1.97 sec delay
DELAY4	MOVLW	h'00'
		MOVWF	COUNT1
		MOVLW	d'255'
		MOVWF	COUNT2
		MOVLW	d'10'
		MOVWF	COUNTER
LOOP4	INCFSZ	COUNT1,F
		GOTO	LOOP4
		DECFSZ	COUNT2,F
		GOTO 	LOOP4
		DECFSZ	COUNTER,F
		GOTO 	LOOP4
		RETURN


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INTERRUPTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; treats RB4-7 interrupts
; we first check in which scene we are to know what each button means
; in the MAIN_MENU, we can only use RB5 and RB7
; in all other scenes, we can use the 44 buttons

RBINT	CALL	DELAY
		BTFSC	SCENE,3
		GOTO	MENUINT
		BTFSC	SCENE,2
		GOTO	MODE1INT
		BTFSC	SCENE,1
		GOTO	MODE2INT
		BTFSC	SCENE,0
		GOTO	MODE3INT
		GOTO	LEAVEINT1

; Arriving here means that the interrupt is from the MAIN_MENU scene
MENUINT	BTFSS	PORTB,7
		GOTO	CHECK_MODE
		BTFSS	PORTB,5
		GOTO	MOVE_AST
		GOTO	LEAVEINT1

; if the player pressed confirm, we need to check what mode they selected
; this is done through the location of the asterisk
; if its last position was near 11, then the player selected MODE 1
; etc.
; we compare the position of the current DD ram address to the 3 possibilities

CHECK_MODE
		MOVLW	d'4'
		MOVWF	SCENE
		MOVF 	AC,w
		MOVWF 	c1
		MOVLW 	d'6'
		SUBWF 	c1
		BTFSC 	STATUS,Z
		GOTO 	LEAVEINT1

  		MOVLW	d'2'
		MOVWF	SCENE
		MOVF 	AC,w
		MOVWF	c1
		MOVLW	d'9'
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO 	LEAVEINT1

  		MOVLW	d'1'
		MOVWF	SCENE
		GOTO 	LEAVEINT1
		
MOVE_AST	
		MOVF	AC,w
		MOVWF	c1
		MOVLW 	d'12'
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO	AT_3

		MOVF	AC,w
		MOVWF	c1
		MOVLW	d'9'
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO	AT_2
  
		MOVF	AC,w
		MOVWF	c1
		MOVLW	d'6'
		SUBWF	c1
		BTFSC	STATUS,Z
		GOTO	AT_1
		GOTO	LEAVEINT1


AT_3	MOVLW	d'6'
		MOVWF	AC
		MOVLW	b'01000'
		MOVWF	tempA1
  		MOVLW	b'01011'
		MOVWF	tempA2
		MOVLW	b'01000'
		MOVWF	tempB1
		MOVLW	b'00101'
		MOVWF	tempB2
		CALL	SET_AST

		GOTO	LEAVEINT1

AT_2	MOVLW	d'12'
		MOVWF	AC
		MOVLW	b'01000'
		MOVWF	tempA1
  		MOVLW	b'01000'
		MOVWF	tempA2
		MOVLW	b'01000'
		MOVWF	tempB1
		MOVLW	b'01011'
		MOVWF	tempB2
		CALL	SET_AST
  
		GOTO	LEAVEINT1
  
AT_1	MOVLW	d'9'
		MOVWF	AC
 		MOVLW	b'01000'
		MOVWF	tempA1
  		MOVLW	b'00101'
		MOVWF	tempA2
		MOVLW	b'01000'
		MOVWF	tempB1
		MOVLW	b'01000'
		MOVWF	tempB2
		CALL	SET_AST
		
		GOTO 	LEAVEINT1

; arriving here means that the interrupt is from MODE 1
MODE1INT
		CALL	PLAY_GAME			
		MOVLW	d'6'
		SUBWF	MATCHES,0
		BTFSC	STATUS,Z ; if we have 6 matches, we should exit the game
		GOTO	END1

		MOVLW	d'9'
		SUBWF	tempA1,0
		BTFSC	STATUS,Z
		GOTO	FA
		MOVLW	d'2'
		SUBWF	NOMATCH 
		BTFSC	STATUS,Z
		GOTO	WEAKER	; this means that we need to print a black box
		ADDWF	NOMATCH
		GOTO	LEAVEINT1
FA		DECF	NOMATCH,0
		BTFSC	STATUS,Z
		GOTO	WEAKER
		GOTO	LEAVEINT1

WEAKER	MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVF	tempA1,w ; use tempA1 to know where to print the black box
		MOVWF	PORTA
		CALL	ET
		
		MOVLW	b'11111'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11111'
		MOVWF	PORTA
		CALL	ET

		CALL	Clear_Address
		INCF	tempA1
		CLRF	NOMATCH
		GOTO 	LEAVEINT1

; arrive hear when the game is over
; we should print the result for the player and return to the main menu
; there are three cases, SUPER, AVG, WEAK, depending on the number
; of committed mismatches
; this is known from the location of tempA1
; if the right-most black box is at 10, print SUPER
; if its at 12, print AVG
; if its at 14, print WEAK

END1	MOVLW	b'01100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'01001'
		MOVWF	PORTA
		CALL	ET
		
		MOVLW	b'1000'
		MOVWF	SCENE
		
		MOVLW	d'4'
		SUBWF	tempA2,0
		BTFSC	STATUS,Z
		GOTO	SUPER
		MOVWF	tempB1
		BTFSC	tempB1,7
		GOTO	SUPER
		MOVLW	d'8'
		SUBWF	tempA2,0
		BTFSC	STATUS,Z
		GOTO	AVG
		MOVWF	tempB1
		BTFSC	tempB1,7
		GOTO	AVG
		GOTO	WEAK

SUPER	CALL	Letter_S

		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		CALL	ET

		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10000'
		MOVWF	PORTA
		CALL	ET

		CALL	Letter_E
		CALL	Letter_R
		
		BSF		PORTB,3
		CALL	DELAY4
		BSF		PORTB,2
		BCF		PORTB,3
		CALL	DELAY4
		BSF		PORTB,3
		BCF		PORTB,2
		CALL	DELAY4
		BCF		PORTB,3
		GOTO	LEAVEINT1

AVG		CALL	Letter_A

		MOVLW	b'10101'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10110'
		MOVWF	PORTA
		CALL	ET

		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'10111'
		MOVWF	PORTA
		CALL	ET
		BSF		PORTB,3
		CALL	DELAY4
		BCF		PORTB,3
		GOTO	LEAVEINT1

WEAK	CALL	Letter_W
		CALL	Letter_E
		CALL	Letter_A
		
		MOVLW	b'10100'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'11011'
		MOVWF	PORTA
		CALL	ET
		BSF		PORTB,2
		CALL	DELAY4
		BCF		PORTB,2
		GOTO	LEAVEINT1

MODE2INT
		CALL	PLAY_GAME
		MOVLW	d'6'
		SUBWF	MATCHES,0
		BTFSC	STATUS,Z 	;if we have 6 matches, we should exit the game
		GOTO	END2
		GOTO	LEAVEINT1

END2	MOVLW	b'1000'
		MOVWF	SCENE
		CALL	PRINT_SCORE
		MOVLW	d'6'
		ADDWF	tempB1
		MOVLW	d'10'
		SUBWF	tempB1,0
		BTFSC	STATUS,Z
		GOTO	DOUBLE_FIGURES
		MOVWF	tempB2
		BTFSS	tempB2,7	;meaning result is negative
		GOTO	DOUBLE_FIGURES
		GOTO	SA

DOUBLE_FIGURES
		MOVLW	b'10001'
		MOVWF	tempA1
		CALL	NUMBER

		MOVLW	d'10'
		SUBWF	tempB1,0
		MOVWF	tempA1
		BSF		tempA1,4
		CALL	NUMBER
		CALL	DELAY4
		GOTO	LEAVEINT1
		
SA		MOVF	tempB1,w
		MOVWF	tempA1
		BSF		tempA1,4
		CALL	NUMBER
		CALL	DELAY4
		GOTO	LEAVEINT1
		
MODE3INT

LEAVEINT1	BCF	INTCON,RBIF
			RETFIE
	
		
TMR0INT
		DECFSZ	COUNTER2,F
		GOTO	LEAVEINT2
		

		DECF	tempA1
		MOVLW	b'01000'
		MOVWF	PORTA
		CALL	ET
		MOVLW	b'01101'
		MOVWF	PORTA
		CALL	ET
		CALL	NUMBER
		MOVLW	d'155'
		MOVWF	COUNTER2
		;restoring old position after decrementing remaining time
		CALL	LOAD_UPPER_AC
		MOVF	AC,w
		MOVWF	PORTA
		CALL	ET
		DECFSZ	tempB1,F
		GOTO	LEAVEINT2

TIME_OVER
		
		CALL	PRINT_SCORE
		MOVF	MATCHES,w
		MOVWF	tempA1
		BSF		tempA1,4
		CALL	NUMBER
		CALL	DELAY4
		MOVLW	b'1000'
		MOVWF	SCENE
		
	
LEAVEINT2	BCF	INTCON,	T0IF
			RETFIE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
end
